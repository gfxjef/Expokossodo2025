#!/usr/bin/env python3
"""
Script de validaci√≥n de las modificaciones implementadas
Valida que las funciones est√©n correctamente implementadas sin ejecutar el servidor
"""

import ast
import inspect
import sys
import json
from datetime import datetime

def validar_sintaxis_python(archivo):
    """Valida que el archivo Python tenga sintaxis correcta"""
    try:
        with open(archivo, 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Compilar el c√≥digo para verificar sintaxis
        ast.parse(contenido)
        print(f"[OK] Sintaxis correcta en {archivo}")
        return True
    except SyntaxError as e:
        print(f"[ERROR] Error de sintaxis en {archivo}: {e}")
        return False
    except Exception as e:
        print(f"[ERROR] Error al leer {archivo}: {e}")
        return False

def validar_funciones_auxiliares():
    """Valida que las funciones auxiliares est√©n implementadas correctamente"""
    try:
        # Importar el m√≥dulo para verificar las funciones
        sys.path.insert(0, '.')
        
        # Verificar que las funciones existen
        funciones_requeridas = [
            'validar_conflictos_horario',
            'obtener_eventos_usuario',
            'crear_registro'
        ]
        
        # Leer el archivo y buscar las definiciones de funciones
        with open('app.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        funciones_encontradas = []
        for linea in contenido.split('\n'):
            if linea.strip().startswith('def '):
                nombre_funcion = linea.split('def ')[1].split('(')[0].strip()
                funciones_encontradas.append(nombre_funcion)
        
        print("[INFO] Funciones encontradas en app.py:")
        for func in funciones_encontradas:
            print(f"   - {func}")
        
        # Verificar funciones requeridas
        faltantes = []
        for func_requerida in funciones_requeridas:
            if func_requerida in funciones_encontradas:
                print(f"[OK] Funci√≥n {func_requerida} encontrada")
            else:
                print(f"[ERROR] Funci√≥n {func_requerida} NO encontrada")
                faltantes.append(func_requerida)
        
        return len(faltantes) == 0
        
    except Exception as e:
        print(f"‚ùå Error al validar funciones auxiliares: {e}")
        return False

def validar_documentacion_funciones():
    """Valida que las funciones tengan documentaci√≥n adecuada"""
    try:
        with open('app.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Buscar funciones con docstrings
        funciones_con_docs = {}
        lineas = contenido.split('\n')
        
        for i, linea in enumerate(lineas):
            if linea.strip().startswith('def ') and ('validar_conflictos' in linea or 'obtener_eventos' in linea or 'crear_registro' in linea):
                nombre_funcion = linea.split('def ')[1].split('(')[0].strip()
                
                # Buscar docstring en las siguientes l√≠neas
                docstring_found = False
                for j in range(i+1, min(i+10, len(lineas))):
                    if '"""' in lineas[j]:
                        docstring_found = True
                        break
                
                funciones_con_docs[nombre_funcion] = docstring_found
        
        print("üìù Documentaci√≥n de funciones:")
        todas_documentadas = True
        for func, tiene_doc in funciones_con_docs.items():
            status = "‚úÖ" if tiene_doc else "‚ùå"
            print(f"   {status} {func}: {'Documentada' if tiene_doc else 'Sin documentaci√≥n'}")
            if not tiene_doc:
                todas_documentadas = False
        
        return todas_documentadas
        
    except Exception as e:
        print(f"‚ùå Error al validar documentaci√≥n: {e}")
        return False

def validar_logica_implementada():
    """Valida que la l√≥gica espec√≠fica est√© implementada"""
    try:
        with open('app.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Palabras clave que deben estar presentes en la nueva implementaci√≥n
        palabras_clave = [
            'modo_actualizacion',
            'eventos_conflictivos',
            'eventos_validos',
            'eventos_inscritos',
            'obtener_eventos_usuario',
            'validar_conflictos_horario',
            'eventos_agregados',
            'eventos_omitidos'
        ]
        
        print("üîç Validando l√≥gica implementada:")
        logica_completa = True
        
        for palabra in palabras_clave:
            if palabra in contenido:
                print(f"   ‚úÖ {palabra} - Implementado")
            else:
                print(f"   ‚ùå {palabra} - NO encontrado")
                logica_completa = False
        
        return logica_completa
        
    except Exception as e:
        print(f"‚ùå Error al validar l√≥gica: {e}")
        return False

def validar_respuesta_json_mejorada():
    """Valida que la respuesta JSON tenga los campos mejorados"""
    try:
        with open('app.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Campos que deben estar en la nueva respuesta JSON
        campos_respuesta = [
            '"success"',
            '"modo"',
            '"eventos_agregados"',
            '"eventos_omitidos"',
            '"registro_id"'
        ]
        
        print("üìä Validando respuesta JSON mejorada:")
        respuesta_completa = True
        
        for campo in campos_respuesta:
            if campo in contenido:
                print(f"   ‚úÖ Campo {campo} - Presente en respuesta")
            else:
                print(f"   ‚ùå Campo {campo} - NO encontrado")
                respuesta_completa = False
        
        return respuesta_completa
        
    except Exception as e:
        print(f"‚ùå Error al validar respuesta JSON: {e}")
        return False

def validar_transacciones_atomicas():
    """Valida que las transacciones sean at√≥micas"""
    try:
        with open('app.py', 'r', encoding='utf-8') as f:
            contenido = f.read()
        
        # Buscar patrones de transacciones at√≥micas
        patrones_transaccionales = [
            'connection.commit()',
            'connection.rollback()',
            'try:',
            'except',
            'finally:'
        ]
        
        print("üîí Validando transacciones at√≥micas:")
        transacciones_ok = True
        
        for patron in patrones_transaccionales:
            if patron in contenido:
                print(f"   ‚úÖ {patron} - Implementado")
            else:
                print(f"   ‚ùå {patron} - NO encontrado")
                transacciones_ok = False
        
        return transacciones_ok
        
    except Exception as e:
        print(f"‚ùå Error al validar transacciones: {e}")
        return False

def generar_reporte_validacion():
    """Genera reporte completo de validaci√≥n"""
    print("üöÄ INICIANDO VALIDACI√ìN DE MODIFICACIONES")
    print(f"‚è∞ Timestamp: {datetime.now()}")
    print("="*60)
    
    resultados = {}
    
    # Ejecutar todas las validaciones
    validaciones = [
        ("Sintaxis Python", lambda: validar_sintaxis_python('app.py')),
        ("Funciones Auxiliares", validar_funciones_auxiliares),
        ("Documentaci√≥n", validar_documentacion_funciones),
        ("L√≥gica Implementada", validar_logica_implementada),
        ("Respuesta JSON Mejorada", validar_respuesta_json_mejorada),
        ("Transacciones At√≥micas", validar_transacciones_atomicas)
    ]
    
    for nombre, validacion in validaciones:
        try:
            print(f"\nüß™ {nombre}")
            print("-" * 40)
            resultado = validacion()
            resultados[nombre] = "‚úÖ PASS" if resultado else "‚ùå FAIL"
        except Exception as e:
            resultados[nombre] = f"‚ùå ERROR: {str(e)}"
        
        print()
    
    # Reporte final
    print("="*60)
    print("üéØ REPORTE FINAL DE VALIDACI√ìN")
    print("="*60)
    
    for nombre, resultado in resultados.items():
        print(f"{resultado} {nombre}")
    
    passed = sum(1 for r in resultados.values() if "‚úÖ" in r)
    total = len(resultados)
    
    print(f"\nüìà RESUMEN: {passed}/{total} validaciones pasaron")
    
    if passed == total:
        print("üèÜ ¬°Todas las validaciones pasaron! Las modificaciones est√°n implementadas correctamente.")
        print("\nüìã PR√ìXIMOS PASOS:")
        print("   1. Iniciar el servidor Flask: python app.py")
        print("   2. Ejecutar tests de integraci√≥n: python test_nuevo_registro.py")
        print("   3. Probar en el frontend la nueva funcionalidad")
    else:
        print("‚ö†Ô∏è  Algunas validaciones fallaron. Revisar la implementaci√≥n.")
    
    return passed == total

if __name__ == "__main__":
    try:
        generar_reporte_validacion()
    except KeyboardInterrupt:
        print("\nüëã Validaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante la validaci√≥n: {e}")